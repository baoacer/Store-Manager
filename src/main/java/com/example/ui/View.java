package com.example.ui;

import com.example.dtos.addProductDTOs.DienMayDTO;
import com.example.dtos.addProductDTOs.SanhSuDTO;
import com.example.dtos.addProductDTOs.ThucPhamDTO;
import com.example.dtos.removeProductDTOs.RemoveDTO;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class View extends JFrame{

    private DefaultTableModel tableModel;
    private JTable table;
    private JLabel jLabelTongSoLuongDienMay, jLabelTongSoLuongSanhSu, jLabelTongSoLuongThucPham;
    private JButton btnTinhTongSoLuongDienMay, btnTinhTongSoLuongSanhSu, btnTinhTongSoLuongThucPham, btnSua;
    private Controller controller = null;
    private String selectedProductId;
    private  JTextField txtMaHang;

    public View(Controller controller) {
        this.controller = controller;

        setTitle("Qu·∫£n L√Ω Kho Trong Si√™u Th·ªã");
        setSize(1000, 700);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Panel ch√≠nh ch·ª©a c√°c th√†nh ph·∫ßn
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Panel nh·∫≠p li·ªáu b√™n tr√™n
        JPanel inputPanel = new JPanel(new GridLayout(5, 5, 10, 10));
        inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        inputPanel.add(new JLabel("M√£ H√†ng:"));
        JTextField txtMaHang = new JTextField();
        inputPanel.add(txtMaHang);

        inputPanel.add(new JLabel("T√™n H√†ng:"));
        JTextField txtTenHang = new JTextField();
        inputPanel.add(txtTenHang);

        inputPanel.add(new JLabel("Ng√†y Nh·∫≠p:"));
        JTextField txtNgayNhap = new JTextField();
        inputPanel.add(txtNgayNhap);

        inputPanel.add(new JLabel("ƒê∆°n Gi√°:"));
        JTextField txtDonGia = new JTextField();
        inputPanel.add(txtDonGia);

        inputPanel.add(new JLabel("S·ªë L∆∞·ª£ng:"));
        JTextField txtSoLuong = new JTextField();
        inputPanel.add(txtSoLuong);

        inputPanel.add(new JLabel("Lo·∫°i H√†ng:"));
        JComboBox<String> cmbCategory = new JComboBox<>(new String[]{"Th·ª±c Ph·∫©m", "ƒêi·ªán M√°y", "S√†nh S·ª©"});
        inputPanel.add(cmbCategory);

        // Th√™m c√°c tr∆∞·ªùng th√¥ng tin chi ti·∫øt (·∫©n ƒëi ban ƒë·∫ßu)
        JLabel lblText1 = new JLabel("Text 1:");
        JTextField txtText1 = new JTextField();
        inputPanel.add(lblText1);
        inputPanel.add(txtText1);

        JLabel lblText2 = new JLabel("Text 2:");
        JTextField txtText2 = new JTextField();
        inputPanel.add(lblText2);
        inputPanel.add(txtText2);

        JLabel lblText3 = new JLabel("Text 3:");
        JTextField txtText3 = new JTextField();
        inputPanel.add(lblText3);
        inputPanel.add(txtText3);

        // ·∫®n c√°c tr∆∞·ªùng Text 1, 2, 3 khi kh·ªüi ƒë·ªông
        lblText1.setVisible(false);
        txtText1.setVisible(false);
        lblText2.setVisible(false);
        txtText2.setVisible(false);
        lblText3.setVisible(false);
        txtText3.setVisible(false);

        mainPanel.add(inputPanel, BorderLayout.NORTH);

        // Panel ch·ª©a c√°c n√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        JButton btnThem = new JButton("‚ûï Th√™m");
        JButton btnXoa = new JButton("üóëÔ∏è X√≥a");
        JButton btnSua = new JButton("üîß S·ª≠a");
        JButton btnSanPhamSapHetHan = new JButton("S·∫£n Ph·∫©m C√≤n 1 Tu·∫ßn L√† H·∫øt H·∫°n");

        btnTinhTongSoLuongDienMay = new JButton("T√≠nh T·ªïng S·ªë L∆∞·ª£ng ƒêi·ªán M√°y");
        btnTinhTongSoLuongSanhSu = new JButton("T√≠nh T·ªïng S·ªë L∆∞·ª£ng S√†nh S·ª©");
        btnTinhTongSoLuongThucPham = new JButton("T√≠nh T·ªïng S·ªë L∆∞·ª£ng Th·ª±c Ph·∫©m");


        // Th√™m c√°c n√∫t v√†o buttonPanel
        buttonPanel.add(btnTinhTongSoLuongDienMay);
        buttonPanel.add(btnTinhTongSoLuongSanhSu);
        buttonPanel.add(btnTinhTongSoLuongThucPham);
        buttonPanel.add(btnThem);
        buttonPanel.add(btnXoa);
        buttonPanel.add(btnSua);
        buttonPanel.add(btnSanPhamSapHetHan);


        // Th√™m buttonPanel v√†o mainPanel
        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        // Panel t√¨m ki·∫øm
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        searchPanel.add(new JLabel("T√¨m Ki·∫øm:"));
        JTextField txtTimKiem = new JTextField(20);
        searchPanel.add(txtTimKiem);
        JButton btnTimKiem = new JButton("üîç");
        searchPanel.add(btnTimKiem);

        // Th√™m comboboxAttribute v√† n√∫t Refresh
        JComboBox<String> comboboxAttribute = new JComboBox<>(new String[]{"Th·ª±c Ph·∫©m", "ƒêi·ªán M√°y", "S√†nh S·ª©"});
        searchPanel.add(comboboxAttribute);
        JButton btnRefresh = new JButton("üîÑ Refresh");
        searchPanel.add(btnRefresh);

        mainPanel.add(searchPanel, BorderLayout.SOUTH);

        // Model cho b·∫£ng
        tableModel = new DefaultTableModel();
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(800, 300));

        // Th√™m panel ch√≠nh v√† b·∫£ng v√†o frame
        add(mainPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // Panel t√≠nh t·ªïng s·ªë l∆∞·ª£ng
        JPanel totalPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));


        jLabelTongSoLuongDienMay = new JLabel("T·ªïng S·ªë L∆∞·ª£ng ƒêi·ªán M√°y:");
        jLabelTongSoLuongSanhSu = new JLabel("T·ªïng S·ªë L∆∞·ª£ng S√†nh S·ª©: ");
        jLabelTongSoLuongThucPham = new JLabel("T·ªïng S·ªë L∆∞·ª£ng Th·ª±c Ph·∫©m");

        JButton btnTinhTongSoLuong = new JButton("T√≠nh T·ªïng S·ªë L∆∞·ª£ng");
        JLabel lblTongSoLuong = new JLabel("T·ªïng S·ªë L∆∞·ª£ng: 0");
        totalPanel.add(btnTinhTongSoLuong);
        totalPanel.add(lblTongSoLuong);

        // Th√™m totalPanel v√†o d∆∞·ªõi searchPanel
        add(totalPanel, BorderLayout.PAGE_END);

        // S·ª± ki·ªán thay ƒë·ªïi JComboBox cho lo·∫°i h√†ng
        cmbCategory.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCategory = (String) cmbCategory.getSelectedItem();

                // Hi·ªÉn th·ªã c√°c tr∆∞·ªùng v√† thay ƒë·ªïi n·ªôi dung c·ªßa c√°c nh√£n d·ª±a tr√™n lo·∫°i h√†ng
                lblText1.setVisible(true);
                txtText1.setVisible(true);
                lblText2.setVisible(true);
                txtText2.setVisible(true);

                if ("Th·ª±c Ph·∫©m".equals(selectedCategory)) {
                    lblText1.setText("Ng√†y s·∫£n xu·∫•t:");
                    lblText2.setText("Ng√†y h·∫øt h·∫°n:");
                    lblText3.setText("Nh√† cung c·∫•p:");
                    lblText3.setVisible(true);
                    txtText3.setVisible(true);
                } else if ("ƒêi·ªán M√°y".equals(selectedCategory)) {
                    lblText1.setText("Th·ªùi gian b·∫£o h√†nh:");
                    lblText2.setText("C√¥ng su·∫•t (KW):");
                    lblText3.setVisible(false);
                    txtText3.setVisible(false);
                } else { // "S√†nh S·ª©"
                    lblText1.setText("Ng√†y s·∫£n xu·∫•t:");
                    lblText2.setText("Ng√†y nh·∫≠p kho:");
                    lblText3.setVisible(false);
                    txtText3.setVisible(false);
                }
            }
        });

        btnTinhTongSoLuongDienMay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DienMayDTO dienMayDTO = new DienMayDTO();
                try {
                    controller.getToTalQuantity(dienMayDTO);
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        btnTinhTongSoLuongSanhSu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SanhSuDTO sanhSuDTO = new SanhSuDTO();
                try {
                    controller.getToTalQuantity(sanhSuDTO);
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        btnTinhTongSoLuongThucPham.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThucPhamDTO thucPhamDTO = new ThucPhamDTO();
                try {
                    controller.getToTalQuantity(thucPhamDTO);
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });


        btnThem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCategory = (String) cmbCategory.getSelectedItem();

                try {
                    if ("Th·ª±c Ph·∫©m".equals(selectedCategory)) {
                        ThucPhamDTO thucPham = new ThucPhamDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                LocalDate.parse(txtText1.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                                LocalDate.parse(txtText2.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                                txtText3.getText()
                        );
                        controller.addProduct(thucPham);
                    } else if ("ƒêi·ªán M√°y".equals(selectedCategory)) {
                        DienMayDTO dienMay = new DienMayDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                Integer.parseInt(txtText1.getText()),
                                Double.parseDouble(txtText2.getText())
                        );
                        controller.addProduct(dienMay);
                    } else if ("S√†nh S·ª©".equals(selectedCategory)) {
                        SanhSuDTO sanhSu = new SanhSuDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                txtText1.getText(),
                                LocalDate.parse(txtText2.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"))
                        );
                        controller.addProduct(sanhSu);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "L·ªói khi th√™m s·∫£n ph·∫©m: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        btnXoa.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    // L·∫•y id c·ªßa s·∫£n ph·∫©m t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn
                    selectedProductId = table.getValueAt(selectedRow, 0).toString();
                }
                RemoveDTO maHang = new RemoveDTO(selectedProductId);
                try {
                    controller.removeProduct(maHang);
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        // Th√™m ListSelectionListener v√†o JTable ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt d√≤ng
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    // L·∫•y ch·ªâ s·ªë c·ªßa d√≤ng ƒë∆∞·ª£c ch·ªçn
                    int selectedRow = table.getSelectedRow();

                    if (selectedRow != -1) {
                        // L·∫•y id c·ªßa s·∫£n ph·∫©m t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn
                        selectedProductId = table.getValueAt(selectedRow, 0).toString();
                    }
                }
            }
        });

        btnSua.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCategory = (String) cmbCategory.getSelectedItem();

                try {
                    if ("Th·ª±c Ph·∫©m".equals(selectedCategory)) {
                        ThucPhamDTO thucPham = new ThucPhamDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                LocalDate.parse(txtText1.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                                LocalDate.parse(txtText2.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                                txtText3.getText()
                        );
                        controller.addProduct(thucPham);
                    } else if ("ƒêi·ªán M√°y".equals(selectedCategory)) {
                        DienMayDTO dienMay = new DienMayDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                Integer.parseInt(txtText1.getText()),
                                Double.parseDouble(txtText2.getText())
                        );
                        controller.addProduct(dienMay);
                    } else if ("S√†nh S·ª©".equals(selectedCategory)) {
                        SanhSuDTO sanhSu = new SanhSuDTO(
                                txtMaHang.getText(),
                                txtTenHang.getText(),
                                Integer.parseInt( txtSoLuong.getText()),
                                Double.parseDouble( txtDonGia.getText()),
                                txtText1.getText(),
                                LocalDate.parse(txtText2.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"))
                        );
                        controller.addProduct(sanhSu);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "L·ªói khi th√™m s·∫£n ph·∫©m: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        btnXoa.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                RemoveDTO removeId = new RemoveDTO(selectedProductId);
                try {
                    controller.removeProduct(removeId);
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        // S·ª± ki·ªán thay ƒë·ªïi JComboBox cho thu·ªôc t√≠nh
        comboboxAttribute.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCategory = (String) comboboxAttribute.getSelectedItem();
                updateTableColumns(selectedCategory);
            }
        });

        // Th√™m s·ª± ki·ªán cho n√∫t Refresh
        btnRefresh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetTable(); // Reset the table to its initial state
            }
        });

        // Kh·ªüi t·∫°o b·∫£ng v·ªõi c√°c c·ªôt m·∫∑c ƒë·ªãnh
        resetTable(); // Set initial columns and clear data
        setVisible(true);
    }

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(null, message);
    }

    public void setTotalQuantityDienMay(int totalQuantityDienMay) {
        jLabelTongSoLuongDienMay.setText(String.valueOf(totalQuantityDienMay));
    }

    public void setTotalQuantitySanhSu(int totalQuantitySanhSu) {
        jLabelTongSoLuongSanhSu.setText(String.valueOf(totalQuantitySanhSu));
    }

    public void setTotalQuantityThucPham(int totalQuantityThucPham) {
        jLabelTongSoLuongThucPham.setText(String.valueOf(totalQuantityThucPham));
    }

    // H√†m c·∫≠p nh·∫≠t c·ªôt c·ªßa b·∫£ng d·ª±a tr√™n lo·∫°i h√†ng ƒë∆∞·ª£c ch·ªçn
    private void updateTableColumns(String category) {
        // X√≥a c√°c c·ªôt hi·ªán t·∫°i
        tableModel.setColumnCount(0);

        // C·∫•u tr√∫c l·∫°i c√°c c·ªôt d·ª±a tr√™n lo·∫°i h√†ng
        if ("Th·ª±c Ph·∫©m".equals(category)) {
            tableModel.setColumnIdentifiers(new String[]{
                    "M√£ H√†ng", "T√™n H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°",
                    "Nh√† Cung C·∫•p", "Ng√†y S·∫£n Xu·∫•t", "Ng√†y H·∫øt H·∫°n", "VAT", "T·ªïng Gi√°"
            });
        } else if ("ƒêi·ªán M√°y".equals(category)) {
            tableModel.setColumnIdentifiers(new String[]{
                    "M√£ H√†ng", "T√™n H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°",
                    "B·∫£o H√†nh", "C√¥ng Su·∫•t", "VAT", "T·ªïng Gi√°"
            });
        } else { // "S√†nh S·ª©"
            tableModel.setColumnIdentifiers(new String[]{
                    "M√£ H√†ng", "T√™n H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°",
                    "Nh√† S·∫£n Xu·∫•t", "Ng√†y Nh·∫≠p Kho", "VAT", "T·ªïng Gi√°"
            });
        }
    }

    // H√†m kh√¥i ph·ª•c l·∫°i b·∫£ng v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    private void resetTable() {
        // Reset table model to the default state with specific columns
        tableModel.setColumnIdentifiers(new String[]{
                "M√£ H√†ng", "T√™n H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°"
        });
        // Clear existing data
        tableModel.setRowCount(0);
    }
}

  
